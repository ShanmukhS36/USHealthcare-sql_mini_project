**Schema (PostgreSQL v17)**

    -- Table 1: Patients
    CREATE TABLE patients (
      patient_id INT PRIMARY KEY,
      name VARCHAR(50),
      age INT,
      gender VARCHAR(10),
      city VARCHAR(50)
    );
    
    INSERT INTO patients VALUES
    (1, 'Arjun', 34, 'Male', 'Hyderabad'),
    (2, 'Divya', 45, 'Female', 'Chennai'),
    (3, 'Rahul', 29, 'Male', 'Bangalore'),
    (4, 'Sneha', 53, 'Female', 'Hyderabad'),
    (5, 'Kiran', 41, 'Male', 'Pune');
    
    -- Table 2: Doctors
    CREATE TABLE doctors (
      doctor_id INT PRIMARY KEY,
      name VARCHAR(50),
      specialty VARCHAR(50),
      city VARCHAR(50)
    );
    
    INSERT INTO doctors VALUES
    (1, 'Dr. Reddy', 'Cardiology', 'Hyderabad'),
    (2, 'Dr. Mehta', 'Neurology', 'Chennai'),
    (3, 'Dr. Roy', 'Orthopedics', 'Bangalore');
    
    -- Table 3: Appointments
    CREATE TABLE appointments (
      appointment_id INT PRIMARY KEY,
      patient_id INT,
      doctor_id INT,
      appointment_date DATE,
      fee DECIMAL(10,2),
      FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
      FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
    );
    
    INSERT INTO appointments VALUES
    (1, 1, 1, '2025-07-20', 500),
    (2, 2, 2, '2025-07-22', 700),
    (3, 3, 3, '2025-07-23', 600),
    (4, 1, 1, '2025-07-24', 500),
    (5, 4, 2, '2025-07-25', 700),
    (6, 5, 1, '2025-07-26', 500);
    
    -- Table 4: Prescriptions
    CREATE TABLE prescriptions (
      prescription_id INT PRIMARY KEY,
      appointment_id INT,
      medicine_name VARCHAR(50),
      quantity INT,
      price DECIMAL(10,2),
      FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id)
    );
    
    INSERT INTO prescriptions VALUES
    (1, 1, 'Paracetamol', 2, 50),
    (2, 2, 'Aspirin', 1, 40),
    (3, 3, 'Paracetamol', 3, 50),
    (4, 4, 'Vitamin D', 2, 30),
    (5, 5, 'Ibuprofen', 2, 60),
    (6, 6, 'Paracetamol', 1, 50);
    

---

**Query #1**

    --- List all patients from Hyderabad, sorted by age descending. Limit to top 3.--
    
    --- where, order by, limit claueses ---
    
    select name, city, age from patients
    where city = 'Hyderabad'
    order by age desc
    limit 3;

| name  | city      | age |
| ----- | --------- | --- |
| Sneha | Hyderabad | 53  |
| Arjun | Hyderabad | 34  |

---
**Query #2**

    
    
    --- Fetch the name, age, and city of patients whose age is above 40. ---
    --- where clauese ---
    
    select name, age, city from patients
    where age > 40;

| name  | age | city      |
| ----- | --- | --------- |
| Divya | 45  | Chennai   |
| Sneha | 53  | Hyderabad |
| Kiran | 41  | Pune      |

---
**Query #3**

    
    
    
    --- List all appointments where the consultation fee is more than â‚¹600. ---
    --- where clauese ---
    
    select * from appointments
    where fee > 600;

| appointment_id | patient_id | doctor_id | appointment_date | fee    |
| -------------- | ---------- | --------- | ---------------- | ------ |
| 2              | 2          | 2         | 2025-07-22       | 700.00 |
| 5              | 4          | 2         | 2025-07-25       | 700.00 |

---
**Query #4**

    
    
    --- JOINs + Aggregations ---
    
    --- Find total revenue generated by each doctor. ---
    
    select d.name AS doctor_name, d.specialty, sum(a.fee) AS Total_Revenue
    from doctors d inner join appointments a 
    ON d.doctor_id = a.doctor_id
    group by d.name, d.specialty;

| doctor_name | specialty   | total_revenue |
| ----------- | ----------- | ------------- |
| Dr. Reddy   | Cardiology  | 1500.00       |
| Dr. Mehta   | Neurology   | 1400.00       |
| Dr. Roy     | Orthopedics | 600.00        |

---
**Query #5**

    
    
    --- List each doctor along with the total number of appointments they handled. --
    
    
    select d.name AS doctor_name, d.specialty, count(a.appointment_date) AS Total_appointment
    from doctors d inner join appointments a 
    ON d.doctor_id = a.doctor_id
    group by d.name, d.specialty;

| doctor_name | specialty   | total_appointment |
| ----------- | ----------- | ----------------- |
| Dr. Reddy   | Cardiology  | 3                 |
| Dr. Mehta   | Neurology   | 2                 |
| Dr. Roy     | Orthopedics | 1                 |

---
**Query #6**

    
    
    --- Show all appointments along with patient name, doctor name, and appointment date. ---
    
    select p.name AS patient_name, d.name AS doctor_name, d.specialty, a.appointment_date
    from doctors d 
    inner join appointments a 
    ON d.doctor_id = a.doctor_id 
    INNER JOIN patients p
    ON p.patient_id = a.patient_id;

| patient_name | doctor_name | specialty   | appointment_date |
| ------------ | ----------- | ----------- | ---------------- |
| Arjun        | Dr. Reddy   | Cardiology  | 2025-07-20       |
| Divya        | Dr. Mehta   | Neurology   | 2025-07-22       |
| Rahul        | Dr. Roy     | Orthopedics | 2025-07-23       |
| Arjun        | Dr. Reddy   | Cardiology  | 2025-07-24       |
| Sneha        | Dr. Mehta   | Neurology   | 2025-07-25       |
| Kiran        | Dr. Reddy   | Cardiology  | 2025-07-26       |

---
**Query #7**

    
    
    --- List medicines prescribed by Dr. Reddy to any patients. ----
    
    SELECT pat.name AS patient_name, 
           d.name AS doctor_name, 
           pr.medicine_name
    FROM doctors d
    INNER JOIN appointments a 
        ON d.doctor_id = a.doctor_id
    INNER JOIN patients pat
        ON pat.patient_id = a.patient_id
    INNER JOIN prescriptions pr
        ON pr.appointment_id = a.appointment_id
    WHERE d.name = 'Dr. Reddy';

| patient_name | doctor_name | medicine_name |
| ------------ | ----------- | ------------- |
| Arjun        | Dr. Reddy   | Paracetamol   |
| Arjun        | Dr. Reddy   | Vitamin D     |
| Kiran        | Dr. Reddy   | Paracetamol   |

---
**Query #8**

    
    
    --- Get total quantity of medicine prescribed in each appointment. ---
    
    select a.appointment_date, pr.medicine_name, sum(pr.quantity) AS Total_quanlity
    from prescriptions pr
    inner join appointments a 
    ON pr.appointment_id = a.appointment_id
    group by a.appointment_date, pr.medicine_name;

| appointment_date | medicine_name | total_quanlity |
| ---------------- | ------------- | -------------- |
| 2025-07-22       | Aspirin       | 1              |
| 2025-07-24       | Vitamin D     | 2              |
| 2025-07-20       | Paracetamol   | 2              |
| 2025-07-26       | Paracetamol   | 1              |
| 2025-07-25       | Ibuprofen     | 2              |
| 2025-07-23       | Paracetamol   | 3              |

---
**Query #9**

    
    
    --- group by + having ----
    --- Find doctors who have conducted more than 1 appointment. ---
    
    select d.name AS doctor_Name, count(a.appointment_date) AS Total_appointments 
    from appointments a
    inner join doctors d
    ON a.doctor_id = d.doctor_id
    group by d.name
    having count(a.appointment_date) > 1;

| doctor_name | total_appointments |
| ----------- | ------------------ |
| Dr. Mehta   | 2                  |
| Dr. Reddy   | 3                  |

---
**Query #10**

    
    
    --- Window Functions ---
    --- Rank all appointments of each patient by appointment date (most recent first).-
    
    select p.name AS patient_Name, a.appointment_date,
    RANK ()  over( partition by p.name order by a.appointment_date desc) AS Rank_patient
    from appointments a
    inner join patients p 
    ON a.patient_id = p.patient_id;

| patient_name | appointment_date | rank_patient |
| ------------ | ---------------- | ------------ |
| Arjun        | 2025-07-24       | 1            |
| Arjun        | 2025-07-20       | 2            |
| Divya        | 2025-07-22       | 1            |
| Kiran        | 2025-07-26       | 1            |
| Rahul        | 2025-07-23       | 1            |
| Sneha        | 2025-07-25       | 1            |

---
